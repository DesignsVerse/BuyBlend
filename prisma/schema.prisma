generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  carts     Cart?
  customer  Customer?
  orders    Order[]
}

model Customer {
  id        String   @id @default(uuid())
  userId    String?  @unique
  name      String
  email     String
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  postal    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Cart {
  id        String        @id @default(uuid())
  sessionId String?       @unique
  userId    String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User?         @relation(fields: [userId], references: [id])
  items     CartItem[]
  logs      CartItemLog[]
  orders    Order[]

  @@index([sessionId])
}

model CartItem {
  id          String   @id @default(uuid())
  cartId      String
  productName String
  productId   String
  variantId   String
  quantity    Int
  unitPrice   Float
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cart        Cart     @relation(fields: [cartId], references: [id])

  @@unique([cartId, variantId])
}

model CartItemLog {
  id        String         @id @default(uuid())
  cartId    String
  productId String
  variantId String
  action    CartActionType
  createdAt DateTime       @default(now())
  cart      Cart           @relation(fields: [cartId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  userId     String?
  customerId String?
  cartId     String?
  status     OrderStatus
  subtotal   Float
  tax        Float
  shipping   Float
  total      Float
  currency   String
  placedAt   DateTime    @default(now())
  cart       Cart?       @relation(fields: [cartId], references: [id])
  customer   Customer?   @relation(fields: [customerId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  items      OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  variantId String
  productName String
  quantity  Int
  unitPrice Float
  currency  String
  snapshot  Json
  order     Order  @relation(fields: [orderId], references: [id])
}

model Payment {
  id               String        @id @default(uuid())
  orderId          String        @unique
  provider         String
  providerIntentId String
  amount           Float
  currency         String
  status           PaymentStatus
  createdAt        DateTime      @default(now())
  order            Order         @relation(fields: [orderId], references: [id])
}

enum CartActionType {
  ADDED
  REMOVED
  UPDATED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
