// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // change to mysql/sqlite if needed
  url      = env("DATABASE_URL")
}

// ----------------
// MODELS
// ----------------

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())

  carts   Cart[]
  orders  Order[]
}

model Cart {
  id        String     @id @default(uuid())
  sessionId String?    @unique
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  items  CartItem[]
  logs   CartItemLog[]
  orders Order[]

  @@index([sessionId])
  @@unique([userId]) // one active cart per user
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  variantId String
  quantity  Int
  unitPrice Float
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart Cart @relation(fields: [cartId], references: [id])

  @@unique([cartId, variantId]) // enforce one variant per cart
}

model CartItemLog {
  id        String          @id @default(uuid())
  cartId    String
  productId String
  variantId String
  action    CartActionType
  createdAt DateTime        @default(now())

  cart Cart @relation(fields: [cartId], references: [id])
}

model Order {
  id        String     @id @default(uuid())
  userId    String?
  cartId    String?
  status    OrderStatus
  subtotal  Float
  tax       Float
  shipping  Float
  total     Float
  currency  String
  placedAt  DateTime   @default(now())

  user    User?     @relation(fields: [userId], references: [id])
  cart    Cart?     @relation(fields: [cartId], references: [id])
  items   OrderItem[]
  payment Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  unitPrice Float
  currency  String
  snapshot  Json

  order Order @relation(fields: [orderId], references: [id])
}

model Payment {
  id               String   @id @default(uuid())
  orderId          String   @unique
  provider         String
  providerIntentId String
  amount           Float
  currency         String
  status           PaymentStatus
  createdAt        DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

// ----------------
// ENUMS
// ----------------

enum CartActionType {
  ADDED
  REMOVED
  UPDATED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
